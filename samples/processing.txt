val fanEvents = fanData.map {
  line => 
  val elements = line.split(",")

  val dt = org.joda.time.DateTime.parse(elements(6).replace(" ", "T"))
  val v = (":[^\"]\"([0-9A-F]*)".r findFirstMatchIn elements(5)).flatMap{ m => Some(java.lang.Integer.parseInt(m.group(1), 16)) }.getOrElse(0)
  
  val x = (v & 0xFF).toByte / 64.0
  val y = ((v >> 8) & 0xFF).toByte / 64.0
  val z = (v >> 16).toByte * -1.0 / 64.0
  
  val dist = scala.math.sqrt(x*x + y*y + z*z)
  
  (dt.getMillis, dist)
}.cache()
fanEvents.take(100).mkString("\n")
val windowSizeMillis = 5000
val eventsStat = fanEvents.groupBy(t => t._1 / windowSizeMillis).mapValues(v => breeze.stats.meanAndVariance(v.map(_._2))).sortByKey().cache()